/******************************
 * Program Name: Project 4
 * Author: Jamie Loebe
 * Date: 11/18/2018
 * Description: This is the 
 * source file for Barbarian
******************************/

#include "Barbarian.hpp"
#include <string>
#include <iostream>
#include <cstdlib>
#include <ctime>


using std::cout;
using std::cin;
using std::endl;

/*********************************
* Description: This function
* sets certain information for
* the selected character and checks
* if they are dead or not
**********************************/

void Barbarian::setInfo() {
    name = "Barbarian";
    armor = 0;
    strength = 12;
    dead = false;
    srand(time(NULL));
}

/**********************************
* Description: This function returns
* the damage generated by the 
* Barbarian. It also outputs
* the damage generated.
**********************************/


int Barbarian::attack() {
    int damage = attack_roll();
    cout << "Barbarian attacked and generated " << damage << " attack points!!" << endl;
    return damage;
}

/************************************
* Description: This function generates
* a random roll fo the dice for the 
* Barbarian attack, and returns the 
* randomly generated roll.
************************************/

int Barbarian::attack_roll() {
    int roll = rand() % 6 + 1;
    roll = roll + (rand() % 6 + 1);
    return roll;
}

/*************************************
* Description: This function generates
* and returns a random number for the
* roll of the die for the Barbarians defense.
**************************************/

int Barbarian::defend_roll() {
    int roll = rand() % 6 + 1;
    roll = roll + (rand() % 6 + 1);
    return roll;
}

/***************************************
* Description: This function iterates through
* and checks what the attack_roll of the attacker
* was. Depending on the attack_roll, it
* outputs information on Barbarian accordingly.
****************************************/

void Barbarian::defend(int attacker_roll) {
    int defender_roll = defend_roll();

    if(attacker_roll < 999){
        cout << "Barbarian defended and Barbarian generated " << defender_roll << " defend points!!" << endl;
    }
    int damage;
    damage = attacker_roll - defender_roll;

    if (damage <= 0) {
        cout << "Barbarian defends attack! Armor and strength remain the same." << endl;
        cout << "Barbarian armor remains at " << armor << endl;
        cout << "Barbarian strength remains at " << strength << endl;
    }
    else if (damage <= armor) {
        armor = armor - damage;
        cout << "Barbarian armor remains at " << armor << endl;
        cout << "Barbarian strength remains at " << strength << endl;
    }
    else if(damage >= 999 ){
        cout << "Oh no! Barbarian has died!" << endl;
        cout << "Armor points: 0" << endl;
        cout << "Strength points: 0" << endl;
        armor = 0;
        strength = 0;
        dead = true;
    }
    else if(damage > armor){
        damage = damage - armor;
        strength = strength - damage;
        armor = 0;
        cout << "Barbarian armor remains at " << armor << endl;
        cout << "Barbarian strength remains at " << strength << endl;
    }
    if(strength<=0 ){
        dead = true;
    }
}

/******************************************
* Description: This function returns the name
* of the character.
******************************************/

std::string Barbarian::getName() {
    return name;
}

/*****************************************
* Description: This function returns the 
* armor of the character.
*****************************************/

int Barbarian::getArmor() {
    return armor;
}

/*****************************************
* Description: This function returns the 
* strength of the character.
*****************************************/

int Barbarian::getStrength()
{
    return strength;
}

/*****************************************
* Description: This function returns whether
* character dead or not.
*****************************************/

bool Barbarian::isDead() {
    return dead;
}

/******************************************
* Description: This is the deconstructor.
******************************************/

Barbarian::~Barbarian() {

}

